
traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dde  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000798  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048c  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043e  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c4  00000000  00000000  00002302  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000025c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  78:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    ++reg_name;                     // Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
 * Input:    reg_name - Address of Data Direction Register, such as &DDRB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
    ++reg_name;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  b2:	81 81       	ldd	r24, Z+1	; 0x01
  b4:	28 2b       	or	r18, r24
  b6:	21 83       	std	Z+1, r18	; 0x01
  b8:	08 95       	ret

000000ba <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ba:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  bc:	90 81       	ld	r25, Z
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <GPIO_write_low+0xe>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <GPIO_write_low+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d4:	fc 01       	movw	r30, r24
  d6:	40 81       	ld	r20, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <GPIO_write_high+0xe>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <GPIO_write_high+0xa>
  e6:	24 2b       	or	r18, r20
  e8:	20 83       	st	Z, r18
  ea:	08 95       	ret

000000ec <GPIO_toggle>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  ec:	fc 01       	movw	r30, r24
  ee:	40 81       	ld	r20, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <GPIO_toggle+0xe>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <GPIO_toggle+0xa>
  fe:	24 27       	eor	r18, r20
 100:	20 83       	st	Z, r18
 102:	08 95       	ret

00000104 <GPIO_read>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  Pin value
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
    return (*reg_name & (1<<pin_num));
 104:	fc 01       	movw	r30, r24
 106:	20 81       	ld	r18, Z
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_read+0xe>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_read+0xa>
 116:	82 23       	and	r24, r18
 118:	08 95       	ret

0000011a <buttonPushed>:
#include <util/delay.h>     // Functions for busy-wait delay loops
#include <avr/io.h>         // AVR device-specific IO definitions
#include "gpio.h"           // GPIO library

uint8_t buttonPushed(volatile uint8_t *reg_name, uint8_t pin_num)
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	8c 01       	movw	r16, r24
 124:	d6 2f       	mov	r29, r22
	int8_t debounce = 0;
 126:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		if (!GPIO_read(reg_name, pin_num))
 128:	6d 2f       	mov	r22, r29
 12a:	c8 01       	movw	r24, r16
 12c:	0e 94 82 00 	call	0x104	; 0x104 <GPIO_read>
 130:	81 11       	cpse	r24, r1
 132:	02 c0       	rjmp	.+4      	; 0x138 <buttonPushed+0x1e>
		++debounce;
 134:	cf 5f       	subi	r28, 0xFF	; 255
 136:	01 c0       	rjmp	.+2      	; 0x13a <buttonPushed+0x20>
		else
		debounce = 0;
 138:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e3       	ldi	r24, 0x3F	; 63
 13c:	9c e9       	ldi	r25, 0x9C	; 156
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <buttonPushed+0x24>
 142:	00 c0       	rjmp	.+0      	; 0x144 <buttonPushed+0x2a>
 144:	00 00       	nop
		
		_delay_ms(10);
		
		if (debounce == 4)
 146:	c4 30       	cpi	r28, 0x04	; 4
 148:	79 f7       	brne	.-34     	; 0x128 <buttonPushed+0xe>
		return 1;
	}
}
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <main>:

int main(void)
{
    // Configure pedestrian traffic light and set Red LED HIGH
    GPIO_config_output(&DDRB, LED_RED_P);
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_RED_P);
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 6a 00 	call	0xd4	; 0xd4 <GPIO_write_high>
	GPIO_config_output(&DDRB, LED_GRN_P);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	84 e2       	ldi	r24, 0x24	; 36
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_GRN_P);
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	85 e2       	ldi	r24, 0x25	; 37
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_write_low>
    
    // Configure car traffic light and set Green LED HIGH
    GPIO_config_output(&DDRC, LED_RED_C);
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	87 e2       	ldi	r24, 0x27	; 39
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_RED_C);
 188:	64 e0       	ldi	r22, 0x04	; 4
 18a:	88 e2       	ldi	r24, 0x28	; 40
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_write_low>
    GPIO_config_output(&DDRC, LED_YLW_C);
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	87 e2       	ldi	r24, 0x27	; 39
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_YLW_C);
 19c:	63 e0       	ldi	r22, 0x03	; 3
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_write_low>
    GPIO_config_output(&DDRC, LED_GRN_C);
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	87 e2       	ldi	r24, 0x27	; 39
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_high(&PORTC, LED_GRN_C);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 6a 00 	call	0xd4	; 0xd4 <GPIO_write_high>

    // Configure Push Button
    GPIO_config_input_pullup(&DDRD, PUSH_BTN);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>

    while (1)
    {
		// Cycle through traffic light states once
        if (buttonPushed(&PIND, PUSH_BTN))
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	89 e2       	ldi	r24, 0x29	; 41
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 8d 00 	call	0x11a	; 0x11a <buttonPushed>
 1ce:	88 23       	and	r24, r24
 1d0:	c9 f3       	breq	.-14     	; 0x1c4 <main+0x6e>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	89 e6       	ldi	r24, 0x69	; 105
 1d6:	98 e1       	ldi	r25, 0x18	; 24
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x82>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x8c>
 1e2:	00 00       	nop
        {
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTC, LED_GRN_C); // Car        Green  LED 1 -> 0
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	88 e2       	ldi	r24, 0x28	; 40
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
			GPIO_toggle(&PORTC, LED_YLW_C); // Car        Yellow LED 0 -> 1
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	8d e3       	ldi	r24, 0x3D	; 61
 1fc:	99 e4       	ldi	r25, 0x49	; 73
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0xa8>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0xb2>
 208:	00 00       	nop
			_delay_ms(BLINK_DELAY * 3);     // Wait on    Yellow
	        GPIO_toggle(&PORTC, LED_YLW_C); // Car        Yellow LED 1 -> 0
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTC, LED_RED_C); // Car        Red    LED 0 -> 1
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTB, LED_RED_P); // Pedestrian Red    LED 1 -> 0
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	85 e2       	ldi	r24, 0x25	; 37
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTB, LED_GRN_P); // Pedestrian Green  LED 0 -> 1
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	85 e2       	ldi	r24, 0x25	; 37
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	81 e1       	ldi	r24, 0x11	; 17
 236:	9a e7       	ldi	r25, 0x7A	; 122
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xe2>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xec>
 242:	00 00       	nop
	        _delay_ms(BLINK_DELAY * 5);     // Wait on    Red
	        GPIO_toggle(&PORTC, LED_RED_C);	// Car        Red    LED 1 -> 0 
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTC, LED_YLW_C);	// Car        Yellow LED 0 -> 1
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	8d e3       	ldi	r24, 0x3D	; 61
 25c:	99 e4       	ldi	r25, 0x49	; 73
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x108>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x112>
 268:	00 00       	nop
	        _delay_ms(BLINK_DELAY * 3);     // Wait on    Yellow
	        GPIO_toggle(&PORTC, LED_YLW_C); // Car        Yellow LED 1 -> 0
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTC, LED_GRN_C); // Car        Green  LED 0 -> 1
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTB, LED_GRN_P); // Pedestrian Green  LED 1 -> 0
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	85 e2       	ldi	r24, 0x25	; 37
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
	        GPIO_toggle(&PORTB, LED_RED_P); // Pedestrian Red    LED 0 -> 1
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 76 00 	call	0xec	; 0xec <GPIO_toggle>
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	89 e6       	ldi	r24, 0x69	; 105
 296:	98 e1       	ldi	r25, 0x18	; 24
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x142>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x14c>
 2a2:	00 00       	nop
	        _delay_ms(BLINK_DELAY);
			while (!buttonPushed(&PIND, PUSH_BTN))
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	89 e2       	ldi	r24, 0x29	; 41
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 8d 00 	call	0x11a	; 0x11a <buttonPushed>
 2ae:	88 23       	and	r24, r24
 2b0:	c9 f3       	breq	.-14     	; 0x2a4 <main+0x14e>
 2b2:	88 cf       	rjmp	.-240    	; 0x1c4 <main+0x6e>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
