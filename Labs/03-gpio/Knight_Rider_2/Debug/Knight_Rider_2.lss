
Knight_Rider_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5f  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
  b2:	81 81       	ldd	r24, Z+1	; 0x01
  b4:	28 2b       	or	r18, r24
  b6:	21 83       	std	Z+1, r18	; 0x01
  b8:	08 95       	ret

000000ba <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  ba:	fc 01       	movw	r30, r24
  bc:	40 81       	ld	r20, Z
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <GPIO_write_high+0xe>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <GPIO_write_high+0xa>
  cc:	24 2b       	or	r18, r20
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret

000000d2 <GPIO_toggle>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  d2:	fc 01       	movw	r30, r24
  d4:	40 81       	ld	r20, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_toggle+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_toggle+0xa>
  e4:	24 27       	eor	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <GPIO_read>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  Pin value
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
    return (*reg_name & (1<<pin_num));
  ea:	fc 01       	movw	r30, r24
  ec:	20 81       	ld	r18, Z
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_read+0xe>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_read+0xa>
  fc:	82 23       	and	r24, r18
  fe:	08 95       	ret

00000100 <buttonPushed>:
#include <avr/io.h>
#include <util/delay.h>
#include "gpio.h"

uint8_t buttonPushed(volatile uint8_t *reg_name, uint8_t pin_num)
{
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	8c 01       	movw	r16, r24
 10a:	d6 2f       	mov	r29, r22
	int8_t debounce = 0;
 10c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		if (!GPIO_read(reg_name, pin_num))
 10e:	6d 2f       	mov	r22, r29
 110:	c8 01       	movw	r24, r16
 112:	0e 94 75 00 	call	0xea	; 0xea <GPIO_read>
 116:	81 11       	cpse	r24, r1
 118:	02 c0       	rjmp	.+4      	; 0x11e <buttonPushed+0x1e>
			++debounce;
 11a:	cf 5f       	subi	r28, 0xFF	; 255
 11c:	01 c0       	rjmp	.+2      	; 0x120 <buttonPushed+0x20>
		else
			debounce = 0;
 11e:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <buttonPushed+0x24>
 128:	00 c0       	rjmp	.+0      	; 0x12a <buttonPushed+0x2a>
 12a:	00 00       	nop
			
		_delay_ms(10);
		
		if (debounce == 4)
 12c:	c4 30       	cpi	r28, 0x04	; 4
 12e:	79 f7       	brne	.-34     	; 0x10e <buttonPushed+0xe>
			return 1;
	}
}
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <main>:

int main(void)
{
	// Configure LEDs at port C
	// Set first 5 pins as output in Data Direction Register
	for (int pin = 0; pin < 5; ++pin)
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	06 c0       	rjmp	.+12     	; 0x14e <main+0x12>
	{
		GPIO_config_output(&DDRC, pin);
 142:	6c 2f       	mov	r22, r28
 144:	87 e2       	ldi	r24, 0x27	; 39
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>

int main(void)
{
	// Configure LEDs at port C
	// Set first 5 pins as output in Data Direction Register
	for (int pin = 0; pin < 5; ++pin)
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	c5 30       	cpi	r28, 0x05	; 5
 150:	d1 05       	cpc	r29, r1
 152:	bc f3       	brlt	.-18     	; 0x142 <main+0x6>
	{
		GPIO_config_output(&DDRC, pin);
	}
    // ...and turn first LED on in Data Register
	GPIO_write_high(&PORTC, 0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_write_high>
	
	// Configure Push Button at port D and enable internal pull-up resistor
	GPIO_config_input_pullup(&DDRD, PUSH);
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	8a e2       	ldi	r24, 0x2A	; 42
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>
	
    while (1) 
    {
		if (buttonPushed(&PIND, PUSH))
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	89 e2       	ldi	r24, 0x29	; 41
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 80 00 	call	0x100	; 0x100 <buttonPushed>
 172:	88 23       	and	r24, r24
 174:	c9 f3       	breq	.-14     	; 0x168 <main+0x2c>
		{
			while (1) 
			{
				// Loops through 5 LEDs
				for (int i = 0; i < 8; ++i)
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	2e c0       	rjmp	.+92     	; 0x1d8 <main+0x9c>
				{
					if (i < 4)
 17c:	c4 30       	cpi	r28, 0x04	; 4
 17e:	d1 05       	cpc	r29, r1
 180:	ac f4       	brge	.+42     	; 0x1ac <main+0x70>
					{
						GPIO_toggle(&PORTC, i);
 182:	6c 2f       	mov	r22, r28
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_toggle>
						GPIO_toggle(&PORTC, i+1);
 18c:	6c 2f       	mov	r22, r28
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_toggle>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	89 e6       	ldi	r24, 0x69	; 105
 19c:	98 e1       	ldi	r25, 0x18	; 24
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x62>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x6c>
 1a8:	00 00       	nop
 1aa:	15 c0       	rjmp	.+42     	; 0x1d6 <main+0x9a>
						_delay_ms(500);
					}
					else
					{
						GPIO_toggle(&PORTC, 8-i);
 1ac:	68 e0       	ldi	r22, 0x08	; 8
 1ae:	6c 1b       	sub	r22, r28
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_toggle>
						GPIO_toggle(&PORTC, 8-i-1);
 1b8:	67 e0       	ldi	r22, 0x07	; 7
 1ba:	6c 1b       	sub	r22, r28
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_toggle>
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
 1c6:	29 e6       	ldi	r18, 0x69	; 105
 1c8:	88 e1       	ldi	r24, 0x18	; 24
 1ca:	91 50       	subi	r25, 0x01	; 1
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x8e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x98>
 1d4:	00 00       	nop
		if (buttonPushed(&PIND, PUSH))
		{
			while (1) 
			{
				// Loops through 5 LEDs
				for (int i = 0; i < 8; ++i)
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	c8 30       	cpi	r28, 0x08	; 8
 1da:	d1 05       	cpc	r29, r1
 1dc:	7c f2       	brlt	.-98     	; 0x17c <main+0x40>
 1de:	cb cf       	rjmp	.-106    	; 0x176 <main+0x3a>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
