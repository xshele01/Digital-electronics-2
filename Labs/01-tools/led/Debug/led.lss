
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000930  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <led_on>:
 **********************************************************************/
void led_on(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4
  82:	08 95       	ret

00000084 <led_off>:

void led_off(void)
{
    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  84:	2d 98       	cbi	0x05, 5	; 5
  86:	08 95       	ret

00000088 <dot>:

void dot(void)
{
    // Invert LED in Data Register
    // PORTB = PORTB or 0010 0000
    led_on();
  88:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	89 e6       	ldi	r24, 0x69	; 105
  90:	98 e1       	ldi	r25, 0x18	; 24
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <dot+0xa>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <dot+0x14>
  9c:	00 00       	nop
    _delay_ms(DOT);
    led_off();
  9e:	0e 94 42 00 	call	0x84	; 0x84 <led_off>
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	84 e3       	ldi	r24, 0x34	; 52
  a6:	9c e0       	ldi	r25, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <dot+0x20>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <dot+0x2a>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <comma>:
    _delay_ms(PAUSE_SHORT);
}

void comma(void)
{
    led_on();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <comma+0xa>
  c8:	00 c0       	rjmp	.+0      	; 0xca <comma+0x14>
  ca:	00 00       	nop
    _delay_ms(COMMA);
    led_off();
  cc:	0e 94 42 00 	call	0x84	; 0x84 <led_off>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	84 e3       	ldi	r24, 0x34	; 52
  d4:	9c e0       	ldi	r25, 0x0C	; 12
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <comma+0x20>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <comma+0x2a>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <main>:
    // Infinite loop
    while (1)
    {
        // Pause several milliseconds
        // D in Morse code
        comma();
  e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <comma>
        dot();
  e8:	0e 94 44 00 	call	0x88	; 0x88 <dot>
        dot();
  ec:	0e 94 44 00 	call	0x88	; 0x88 <dot>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	87 ea       	ldi	r24, 0xA7	; 167
  f4:	91 e6       	ldi	r25, 0x61	; 97
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x12>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x1c>
 100:	00 00       	nop
        
        _delay_ms(PAUSE_LONG);
        
        // E in Morse code
        dot();
 102:	0e 94 44 00 	call	0x88	; 0x88 <dot>
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x28>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x32>
 116:	00 00       	nop
        
        _delay_ms(PAUSE_LONG);
        
        // 2 in Morse code
        dot();
 118:	0e 94 44 00 	call	0x88	; 0x88 <dot>
        dot();
 11c:	0e 94 44 00 	call	0x88	; 0x88 <dot>
        comma();
 120:	0e 94 5b 00 	call	0xb6	; 0xb6 <comma>
        comma();
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <comma>
        comma();
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <comma>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	91 e6       	ldi	r25, 0x61	; 97
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x4e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x58>
 13c:	00 00       	nop
 13e:	d2 cf       	rjmp	.-92     	; 0xe4 <main>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
