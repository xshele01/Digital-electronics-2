
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d8  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  000011cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  000018cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dot>:
 * Returns:  none
 **********************************************************************/
void dot(void)
{
    // Set pin HIGH in Data Register (LED on)
    PORTB = PORTB | (1<<LED_GREEN);
  80:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <dot+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <dot+0x12>
  92:	00 00       	nop
    _delay_ms(SHORT_DELAY * 2);
    // Set pin LOW in Data Register (LED off)
    PORTB = PORTB & ~(1<<LED_GREEN);
  94:	2d 98       	cbi	0x05, 5	; 5
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	84 e3       	ldi	r24, 0x34	; 52
  9a:	9c e0       	ldi	r25, 0x0C	; 12
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <dot+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <dot+0x26>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <dash>:
 * Purpose:  Toggle LED to display dash in Morse code.
 * Returns:  none
 **********************************************************************/
void dash(void)
{
    PORTB = PORTB | (1<<LED_GREEN);
  aa:	2d 9a       	sbi	0x05, 5	; 5
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <dash+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <dash+0x12>
  bc:	00 00       	nop
    _delay_ms(SHORT_DELAY * 4);
    PORTB = PORTB & ~(1<<LED_GREEN);
  be:	2d 98       	cbi	0x05, 5	; 5
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	84 e3       	ldi	r24, 0x34	; 52
  c4:	9c e0       	ldi	r25, 0x0C	; 12
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <dash+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <dash+0x26>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Set pin as output in Data Direction Register
    DDRB = DDRB | (1<<LED_GREEN);
  d4:	25 9a       	sbi	0x04, 5	; 4
    PORTB = PORTB & ~(1<<LED_GREEN);
  d6:	2d 98       	cbi	0x05, 5	; 5
    // Infinite loop
    while (1)
    {
        // Pause several milliseconds
        // D in Morse code
        dash();
  d8:	0e 94 55 00 	call	0xaa	; 0xaa <dash>
        dot(); 
  dc:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dot();
  e0:	0e 94 40 00 	call	0x80	; 0x80 <dot>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	87 ea       	ldi	r24, 0xA7	; 167
  e8:	91 e6       	ldi	r25, 0x61	; 97
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x16>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x20>
  f4:	00 00       	nop
        
        _delay_ms(SHORT_DELAY * 8);
        
        // E in Morse code
        dot();
  f6:	0e 94 40 00 	call	0x80	; 0x80 <dot>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	87 ea       	ldi	r24, 0xA7	; 167
  fe:	91 e6       	ldi	r25, 0x61	; 97
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x2c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x36>
 10a:	00 00       	nop
        
        _delay_ms(SHORT_DELAY * 8);
        
        // 2 in Morse code
        dot();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dot();
 110:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dash();
 114:	0e 94 55 00 	call	0xaa	; 0xaa <dash>
        dash();
 118:	0e 94 55 00 	call	0xaa	; 0xaa <dash>
        dash();
 11c:	0e 94 55 00 	call	0xaa	; 0xaa <dash>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	91 e6       	ldi	r25, 0x61	; 97
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x52>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x5c>
 130:	00 00       	nop
 132:	d2 cf       	rjmp	.-92     	; 0xd8 <main+0x4>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
