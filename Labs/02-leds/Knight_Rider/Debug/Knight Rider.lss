
Knight Rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080b  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f9  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <buttonPushed>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/sfr_defs.h>

uint8_t buttonPushed(volatile uint8_t *reg_name, uint8_t pin_num)
{
  80:	fc 01       	movw	r30, r24
	int8_t debounce = 0;
  82:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1)
	{
		if (bit_is_clear(*reg_name, pin_num))
  84:	20 81       	ld	r18, Z
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	06 2e       	mov	r0, r22
  8a:	02 c0       	rjmp	.+4      	; 0x90 <buttonPushed+0x10>
  8c:	35 95       	asr	r19
  8e:	27 95       	ror	r18
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <buttonPushed+0xc>
  94:	20 fd       	sbrc	r18, 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <buttonPushed+0x1c>
			++debounce;
  98:	9f 5f       	subi	r25, 0xFF	; 255
  9a:	01 c0       	rjmp	.+2      	; 0x9e <buttonPushed+0x1e>
		else
			debounce = 0;
  9c:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	af e3       	ldi	r26, 0x3F	; 63
  a0:	bc e9       	ldi	r27, 0x9C	; 156
  a2:	11 97       	sbiw	r26, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <buttonPushed+0x22>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <buttonPushed+0x28>
  a8:	00 00       	nop
			
		_delay_ms(10);
		
		if (debounce == 4)
  aa:	94 30       	cpi	r25, 0x04	; 4
  ac:	59 f7       	brne	.-42     	; 0x84 <buttonPushed+0x4>
			return 1;
	}
}
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret

000000b2 <main>:

int main(void)
{
	// Configure LEDs at port C
	// Set first 5 pins as output in Data Direction Register
    DDRC = 0x1F;
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	87 b9       	out	0x07, r24	; 7
    // ...and turn first LED on in Data Register
	PORTC = 0x1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	88 b9       	out	0x08, r24	; 8
	
	// Configure Push Button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1 << PUSH);
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	8f 7e       	andi	r24, 0xEF	; 239
  be:	8a b9       	out	0x0a, r24	; 10
    PORTD = PORTD | (1<< PUSH);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8b b9       	out	0x0b, r24	; 11
	
    while (1) 
    {
		if (buttonPushed(&PIND, PUSH))
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	89 e2       	ldi	r24, 0x29	; 41
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 40 00 	call	0x80	; 0x80 <buttonPushed>
  d0:	88 23       	and	r24, r24
  d2:	c9 f3       	breq	.-14     	; 0xc6 <main+0x14>
		{
			while (1) 
			{
				for (int i = 0; i < 8; ++i)
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	1d c0       	rjmp	.+58     	; 0x114 <main+0x62>
				{
					if (i < 4)
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	91 05       	cpc	r25, r1
  de:	6c f4       	brge	.+26     	; 0xfa <main+0x48>
					{
						PORTC = (PORTC << 1);
  e0:	28 b1       	in	r18, 0x08	; 8
  e2:	22 0f       	add	r18, r18
  e4:	28 b9       	out	0x08, r18	; 8
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	39 e6       	ldi	r19, 0x69	; 105
  ea:	48 e1       	ldi	r20, 0x18	; 24
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	40 40       	sbci	r20, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x3a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x44>
  f6:	00 00       	nop
  f8:	0c c0       	rjmp	.+24     	; 0x112 <main+0x60>
						_delay_ms(500);
					}
					else
					{
						PORTC = (PORTC >> 1);
  fa:	28 b1       	in	r18, 0x08	; 8
  fc:	26 95       	lsr	r18
  fe:	28 b9       	out	0x08, r18	; 8
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	39 e6       	ldi	r19, 0x69	; 105
 104:	48 e1       	ldi	r20, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	40 40       	sbci	r20, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x54>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x5e>
 110:	00 00       	nop
    {
		if (buttonPushed(&PIND, PUSH))
		{
			while (1) 
			{
				for (int i = 0; i < 8; ++i)
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	04 f3       	brlt	.-64     	; 0xda <main+0x28>
 11a:	dc cf       	rjmp	.-72     	; 0xd4 <main+0x22>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
