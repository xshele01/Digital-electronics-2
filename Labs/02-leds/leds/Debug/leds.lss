
leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000205  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  82:	2d 98       	cbi	0x05, 5	; 5

    // Configure the second LED at port C
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_BREADBOAD);
  84:	3d 9a       	sbi	0x07, 5	; 7
    // ...and turn LED off in Data Register
    PORTC = PORTC & ~(1<<LED_BREADBOAD);
  86:	45 98       	cbi	0x08, 5	; 8

    // Configure Push button at port D and enable internal pull-up resistor
    // Set pin as output in Data Direction Register...
    DDRD = DDRD & ~(1<<PUSH_BREADBOAD);
  88:	54 98       	cbi	0x0a, 4	; 10
    // ...and turn LED off in Data Register
    PORTD = PORTD | (1<<PUSH_BREADBOAD);
  8a:	5c 9a       	sbi	0x0b, 4	; 11
        // Pause several milliseconds
        // _delay_ms(BLINK_DELAY);
    
        if(bit_is_clear(PIND, PUSH_BREADBOAD))
        {
            PORTB = PORTB ^ (1<<LED_GREEN);
  8c:	90 e2       	ldi	r25, 0x20	; 32
    while (1)
    {
        // Pause several milliseconds
        // _delay_ms(BLINK_DELAY);
    
        if(bit_is_clear(PIND, PUSH_BREADBOAD))
  8e:	4c 99       	sbic	0x09, 4	; 9
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0xe>
        {
            PORTB = PORTB ^ (1<<LED_GREEN);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	89 27       	eor	r24, r25
  96:	85 b9       	out	0x05, r24	; 5
            PORTC = PORTC ^ (1<<LED_BREADBOAD);
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	89 27       	eor	r24, r25
  9c:	88 b9       	out	0x08, r24	; 8
            loop_until_bit_is_set(PIND, PUSH_BREADBOAD);
  9e:	4c 9b       	sbis	0x09, 4	; 9
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x1e>
  a2:	f5 cf       	rjmp	.-22     	; 0x8e <main+0xe>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
