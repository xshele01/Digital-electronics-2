
leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b7  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e6  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011e  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <buttonPushed>:
 * Function: buttonPushed
 * Purpose:  Detect button press with debouncing.
 * Returns:  State of a pin connected to the button.
 **********************************************************************/
uint8_t buttonPushed(volatile uint8_t *reg_name, uint8_t pin_num)
{
  80:	fc 01       	movw	r30, r24
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <buttonPushed+0xc>
  88:	44 0f       	add	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <buttonPushed+0x8>
	int8_t debounce = 0;
  90:	90 e0       	ldi	r25, 0x00	; 0

	while (1)
	{
		if (bit_is_clear(*reg_name, pin_num))
  92:	20 81       	ld	r18, Z
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	24 23       	and	r18, r20
  98:	35 23       	and	r19, r21
  9a:	23 2b       	or	r18, r19
  9c:	51 f4       	brne	.+20     	; 0xb2 <buttonPushed+0x32>
			++debounce;
  9e:	9f 5f       	subi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	af e3       	ldi	r26, 0x3F	; 63
  a2:	bc e9       	ldi	r27, 0x9C	; 156
  a4:	11 97       	sbiw	r26, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <buttonPushed+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <buttonPushed+0x2a>
  aa:	00 00       	nop
		else
			debounce = 0;

		_delay_ms(10);

		if (debounce == 4)
  ac:	94 30       	cpi	r25, 0x04	; 4
  ae:	89 f7       	brne	.-30     	; 0x92 <buttonPushed+0x12>
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <buttonPushed+0x42>
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9c e9       	ldi	r25, 0x9C	; 156
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <buttonPushed+0x36>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <buttonPushed+0x3c>
  bc:	00 00       	nop
	while (1)
	{
		if (bit_is_clear(*reg_name, pin_num))
			++debounce;
		else
			debounce = 0;
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	e8 cf       	rjmp	.-48     	; 0x92 <buttonPushed+0x12>
		_delay_ms(10);

		if (debounce == 4)
			return 1;
	}
}
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret

000000c6 <main>:
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  c6:	25 9a       	sbi	0x04, 5	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  c8:	2d 98       	cbi	0x05, 5	; 5

    // Configure the second LED at port C
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_BREAD);
  ca:	3d 9a       	sbi	0x07, 5	; 7
    // ...and turn LED on in Data Register
    PORTC = PORTC & ~(1<<LED_BREAD);
  cc:	45 98       	cbi	0x08, 5	; 8

    // Configure Push Button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1<<PUSH);
  ce:	54 98       	cbi	0x0a, 4	; 10
    PORTD = PORTD | (1<<PUSH);
  d0:	5c 9a       	sbi	0x0b, 4	; 11
		// Pause several milliseconds
		_delay_ms(BLINK_DELAY);
				
        if(buttonPushed(&PIND, PUSH))
        {
            PORTB = PORTB ^ (1<<LED_GREEN);
  d2:	c0 e2       	ldi	r28, 0x20	; 32
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x14>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x1e>
  e4:	00 00       	nop
    while (1)
    {
		// Pause several milliseconds
		_delay_ms(BLINK_DELAY);
				
        if(buttonPushed(&PIND, PUSH))
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	89 e2       	ldi	r24, 0x29	; 41
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 40 00 	call	0x80	; 0x80 <buttonPushed>
  f0:	88 23       	and	r24, r24
  f2:	81 f3       	breq	.-32     	; 0xd4 <main+0xe>
        {
            PORTB = PORTB ^ (1<<LED_GREEN);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8c 27       	eor	r24, r28
  f8:	85 b9       	out	0x05, r24	; 5
            PORTC = PORTC ^ (1<<LED_BREAD);
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	8c 27       	eor	r24, r28
  fe:	88 b9       	out	0x08, r24	; 8
            loop_until_bit_is_set(PIND, PUSH);
 100:	4c 9b       	sbis	0x09, 4	; 9
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x3a>
 104:	e7 cf       	rjmp	.-50     	; 0xd4 <main+0xe>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
